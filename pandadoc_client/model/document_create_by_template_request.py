"""
    PandaDoc Public API

    PandaDoc Public API documentation  # noqa: E501

    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from pandadoc_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from pandadoc_client.exceptions import ApiAttributeError


def lazy_import():
    from pandadoc_client.model.document_create_by_template_request_content_placeholders import DocumentCreateByTemplateRequestContentPlaceholders
    from pandadoc_client.model.document_create_by_template_request_images import DocumentCreateByTemplateRequestImages
    from pandadoc_client.model.document_create_by_template_request_recipients import DocumentCreateByTemplateRequestRecipients
    from pandadoc_client.model.document_create_by_template_request_tokens import DocumentCreateByTemplateRequestTokens
    from pandadoc_client.model.pricing_table_request import PricingTableRequest
    globals()['DocumentCreateByTemplateRequestContentPlaceholders'] = DocumentCreateByTemplateRequestContentPlaceholders
    globals()['DocumentCreateByTemplateRequestImages'] = DocumentCreateByTemplateRequestImages
    globals()['DocumentCreateByTemplateRequestRecipients'] = DocumentCreateByTemplateRequestRecipients
    globals()['DocumentCreateByTemplateRequestTokens'] = DocumentCreateByTemplateRequestTokens
    globals()['PricingTableRequest'] = PricingTableRequest


class DocumentCreateByTemplateRequest(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'template_uuid': (str,),  # noqa: E501
            'recipients': ([DocumentCreateByTemplateRequestRecipients],),  # noqa: E501
            'name': (str,),  # noqa: E501
            'detect_title_variables': (bool,),  # noqa: E501
            'folder_uuid': (str,),  # noqa: E501
            'tokens': ([DocumentCreateByTemplateRequestTokens],),  # noqa: E501
            'fields': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'metadata': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'tags': ([str],),  # noqa: E501
            'images': ([DocumentCreateByTemplateRequestImages],),  # noqa: E501
            'pricing_tables': ([PricingTableRequest],),  # noqa: E501
            'content_placeholders': ([DocumentCreateByTemplateRequestContentPlaceholders],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'template_uuid': 'template_uuid',  # noqa: E501
        'recipients': 'recipients',  # noqa: E501
        'name': 'name',  # noqa: E501
        'detect_title_variables': 'detect_title_variables',  # noqa: E501
        'folder_uuid': 'folder_uuid',  # noqa: E501
        'tokens': 'tokens',  # noqa: E501
        'fields': 'fields',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'images': 'images',  # noqa: E501
        'pricing_tables': 'pricing_tables',  # noqa: E501
        'content_placeholders': 'content_placeholders',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, template_uuid, recipients, *args, **kwargs):  # noqa: E501
        """DocumentCreateByTemplateRequest - a model defined in OpenAPI

        Args:
            template_uuid (str): The ID of a template you want to use. You can copy it from an in app template url such as `https://app.pandadoc.com/a/#/templates/{ID}/content`. A template ID is also obtained by listing templates.
            recipients ([DocumentCreateByTemplateRequestRecipients]): The list of recipients you're sending the document to. Every object must contain the email parameter. The `role`, `first_name` and `last_name` parameters are optional. If the `role` parameter passed, a person is assigned all fields matching their corresponding role. If not passed, a person will receive a read-only link to view the document. If the `first_name` and `last_name` not passed the system 1. creates a new contact, if none exists with the given `email`; or 2. gets the existing contact with the given `email` that already exists.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): Name the document you are creating. If name is not passed, the template name is used.. [optional]  # noqa: E501
            detect_title_variables (bool): Set this parameter as true if you want to detect title variables in the document.. [optional]  # noqa: E501
            folder_uuid (str): [optional]  # noqa: E501
            tokens ([DocumentCreateByTemplateRequestTokens]): You can pass a list of tokens/values to pre-fill tokens used in a template. Name is a token name in a template. Value is a real value you would like to replace a token with.. [optional]  # noqa: E501
            fields ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): You can pass a list of fields/values to pre-fill fields used in a template. Note that the Signature field can't be pre-filled.. [optional]  # noqa: E501
            metadata ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): You can pass arbitrary data in the key-value format to associate custom information with a document. This information is returned in any API requests for the document details by id.. [optional]  # noqa: E501
            tags ([str]): Mark your document with one or several tags.. [optional]  # noqa: E501
            images ([DocumentCreateByTemplateRequestImages]): You can pass a list of images to image blocks (one image in one block) for replacement.. [optional]  # noqa: E501
            pricing_tables ([PricingTableRequest]): Information to construct or populate a pricing table can be passed when creating a document. All product information must be passed when creating a new document. Products stored in PandaDoc cannot be used to populate table rows at this time. Keep in mind that this is an array, so multiple table objects can be passed to a document. Make sure that \"Automatically add products to this table\" is enabled in the PandaDoc template pricing tables you wish to populate via API.. [optional]  # noqa: E501
            content_placeholders ([DocumentCreateByTemplateRequestContentPlaceholders]): You may replace Content Library Item Placeholders with a few content library items each and pre-fill fields/variables values, pricing table items, and assign recipients to roles from there.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.template_uuid = template_uuid
        self.recipients = recipients
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, template_uuid, recipients, *args, **kwargs):  # noqa: E501
        """DocumentCreateByTemplateRequest - a model defined in OpenAPI

        Args:
            template_uuid (str): The ID of a template you want to use. You can copy it from an in app template url such as `https://app.pandadoc.com/a/#/templates/{ID}/content`. A template ID is also obtained by listing templates.
            recipients ([DocumentCreateByTemplateRequestRecipients]): The list of recipients you're sending the document to. Every object must contain the email parameter. The `role`, `first_name` and `last_name` parameters are optional. If the `role` parameter passed, a person is assigned all fields matching their corresponding role. If not passed, a person will receive a read-only link to view the document. If the `first_name` and `last_name` not passed the system 1. creates a new contact, if none exists with the given `email`; or 2. gets the existing contact with the given `email` that already exists.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): Name the document you are creating. If name is not passed, the template name is used.. [optional]  # noqa: E501
            detect_title_variables (bool): Set this parameter as true if you want to detect title variables in the document.. [optional]  # noqa: E501
            folder_uuid (str): [optional]  # noqa: E501
            tokens ([DocumentCreateByTemplateRequestTokens]): You can pass a list of tokens/values to pre-fill tokens used in a template. Name is a token name in a template. Value is a real value you would like to replace a token with.. [optional]  # noqa: E501
            fields ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): You can pass a list of fields/values to pre-fill fields used in a template. Note that the Signature field can't be pre-filled.. [optional]  # noqa: E501
            metadata ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): You can pass arbitrary data in the key-value format to associate custom information with a document. This information is returned in any API requests for the document details by id.. [optional]  # noqa: E501
            tags ([str]): Mark your document with one or several tags.. [optional]  # noqa: E501
            images ([DocumentCreateByTemplateRequestImages]): You can pass a list of images to image blocks (one image in one block) for replacement.. [optional]  # noqa: E501
            pricing_tables ([PricingTableRequest]): Information to construct or populate a pricing table can be passed when creating a document. All product information must be passed when creating a new document. Products stored in PandaDoc cannot be used to populate table rows at this time. Keep in mind that this is an array, so multiple table objects can be passed to a document. Make sure that \"Automatically add products to this table\" is enabled in the PandaDoc template pricing tables you wish to populate via API.. [optional]  # noqa: E501
            content_placeholders ([DocumentCreateByTemplateRequestContentPlaceholders]): You may replace Content Library Item Placeholders with a few content library items each and pre-fill fields/variables values, pricing table items, and assign recipients to roles from there.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.template_uuid = template_uuid
        self.recipients = recipients
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
